// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiplexClient is the client API for Multiplex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplexClient interface {
	StartExchange(ctx context.Context, opts ...grpc.CallOption) (Multiplex_StartExchangeClient, error)
}

type multiplexClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplexClient(cc grpc.ClientConnInterface) MultiplexClient {
	return &multiplexClient{cc}
}

func (c *multiplexClient) StartExchange(ctx context.Context, opts ...grpc.CallOption) (Multiplex_StartExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Multiplex_ServiceDesc.Streams[0], "/server.api.Multiplex/StartExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiplexStartExchangeClient{stream}
	return x, nil
}

type Multiplex_StartExchangeClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type multiplexStartExchangeClient struct {
	grpc.ClientStream
}

func (x *multiplexStartExchangeClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiplexStartExchangeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiplexServer is the server API for Multiplex service.
// All implementations must embed UnimplementedMultiplexServer
// for forward compatibility
type MultiplexServer interface {
	StartExchange(Multiplex_StartExchangeServer) error
	mustEmbedUnimplementedMultiplexServer()
}

// UnimplementedMultiplexServer must be embedded to have forward compatible implementations.
type UnimplementedMultiplexServer struct {
}

func (UnimplementedMultiplexServer) StartExchange(Multiplex_StartExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method StartExchange not implemented")
}
func (UnimplementedMultiplexServer) mustEmbedUnimplementedMultiplexServer() {}

// UnsafeMultiplexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplexServer will
// result in compilation errors.
type UnsafeMultiplexServer interface {
	mustEmbedUnimplementedMultiplexServer()
}

func RegisterMultiplexServer(s grpc.ServiceRegistrar, srv MultiplexServer) {
	s.RegisterService(&Multiplex_ServiceDesc, srv)
}

func _Multiplex_StartExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiplexServer).StartExchange(&multiplexStartExchangeServer{stream})
}

type Multiplex_StartExchangeServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type multiplexStartExchangeServer struct {
	grpc.ServerStream
}

func (x *multiplexStartExchangeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiplexStartExchangeServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Multiplex_ServiceDesc is the grpc.ServiceDesc for Multiplex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Multiplex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.api.Multiplex",
	HandlerType: (*MultiplexServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartExchange",
			Handler:       _Multiplex_StartExchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
