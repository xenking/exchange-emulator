// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsSubscriberClient is the client API for MetricsSubscriber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsSubscriberClient interface {
	Subscribe(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricsSubscriber_SubscribeClient, error)
}

type metricsSubscriberClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsSubscriberClient(cc grpc.ClientConnInterface) MetricsSubscriberClient {
	return &metricsSubscriberClient{cc}
}

func (c *metricsSubscriberClient) Subscribe(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricsSubscriber_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricsSubscriber_ServiceDesc.Streams[0], "/server.metrics.MetricsSubscriber/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsSubscriberSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricsSubscriber_SubscribeClient interface {
	Recv() (*MetricsResponse, error)
	grpc.ClientStream
}

type metricsSubscriberSubscribeClient struct {
	grpc.ClientStream
}

func (x *metricsSubscriberSubscribeClient) Recv() (*MetricsResponse, error) {
	m := new(MetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsSubscriberServer is the server API for MetricsSubscriber service.
// All implementations must embed UnimplementedMetricsSubscriberServer
// for forward compatibility
type MetricsSubscriberServer interface {
	Subscribe(*MetricsRequest, MetricsSubscriber_SubscribeServer) error
	mustEmbedUnimplementedMetricsSubscriberServer()
}

// UnimplementedMetricsSubscriberServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsSubscriberServer struct {
}

func (UnimplementedMetricsSubscriberServer) Subscribe(*MetricsRequest, MetricsSubscriber_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMetricsSubscriberServer) mustEmbedUnimplementedMetricsSubscriberServer() {}

// UnsafeMetricsSubscriberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsSubscriberServer will
// result in compilation errors.
type UnsafeMetricsSubscriberServer interface {
	mustEmbedUnimplementedMetricsSubscriberServer()
}

func RegisterMetricsSubscriberServer(s grpc.ServiceRegistrar, srv MetricsSubscriberServer) {
	s.RegisterService(&MetricsSubscriber_ServiceDesc, srv)
}

func _MetricsSubscriber_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsSubscriberServer).Subscribe(m, &metricsSubscriberSubscribeServer{stream})
}

type MetricsSubscriber_SubscribeServer interface {
	Send(*MetricsResponse) error
	grpc.ServerStream
}

type metricsSubscriberSubscribeServer struct {
	grpc.ServerStream
}

func (x *metricsSubscriberSubscribeServer) Send(m *MetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MetricsSubscriber_ServiceDesc is the grpc.ServiceDesc for MetricsSubscriber service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsSubscriber_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.metrics.MetricsSubscriber",
	HandlerType: (*MetricsSubscriberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MetricsSubscriber_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log.proto",
}
